#include "llvm/ADT/Statistic.h"
#include "llvm/Pass.h"
#include "llvm/IR/Function.h"
#include "llvm/Support/raw_ostream.h"

using namespace llvm;

/*Submitted by Vishal Kumar(226101005)*/

/* the name of my pass that has been updated in 
CMakeLists.txt is "MaxBasicBlock, and my .so file will
also be generated by the same name*/

#define DEBUG_TYPE "MaxBasicBlock"

STATISTIC(HelloCounter, "total definitions functions encountered saved in counter");

namespace {
  
  struct MaxBasicBlock : public FunctionPass {
    static char ID; // this is for the identification of our pass
    MaxBasicBlock() : FunctionPass(ID) {}
    bool runOnFunction(Function &F) override {

      errs() << "Total Function We are having : ";
      errs().write_escaped(F.getName()) << '\n';
      
      /* taking an integer counter MaxSize initialising it to be 0 , 
      which will keep the total instruction counts and output
      the block name with the most number of instructions*/

      long unsigned int MaxSize=0; 
      Function::iterator bb;

      for(Function::iterator BB=F.begin();BB!=F.end();++BB){

          errs()<<"The name of BasicBlock :"<<BB->getName()<<"\n";
          errs()<<"The size of BasicBlock :"<<BB->size()<<"\n\n";
          
          /*We will write a condition when we get the bigger block
          we replace it with the previous one and update the counter*/

          if(MaxSize<BB->size()){
             bb=BB;
             MaxSize=BB->size();
          }    
      } 

      errs()<<"Name of Biggest BasicBlock :"<<bb->getName()<<"\n";
      errs()<<"Size of Biggest BasicBlock :"<<bb->size()<<"\n\n";

      return false;
    }
  };
}

char MaxBasicBlock::ID = 0;
static RegisterPass<MaxBasicBlock> X("MaxBasicBlock", "Hello World Pass");
